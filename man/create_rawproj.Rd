% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create_rawproj.R
\name{create_rawproj}
\alias{create_rawproj}
\title{Create a new project based on workflowr and targets}
\usage{
create_rawproj(
  directory,
  user.name,
  user.email,
  name = NULL,
  git = TRUE,
  existing = FALSE,
  overwrite = FALSE,
  change_wd = TRUE,
  disable_remote = FALSE,
  dry_run = FALSE,
  fields = list(),
  rstudio = rstudioapi::isAvailable(),
  roxygen = TRUE,
  check_name = TRUE,
  open = FALSE
)
}
\arguments{
\item{directory}{character. The directory where the workflowr
project files will be added, e.g., "~/my-wflow-project". When
\code{existing = FALSE}, the directory will be created.}

\item{user.name}{character (default: \code{NULL}). The user name
used by Git to sign commits, e.g., "Ada Lovelace". This setting
only applies to the workflowr project being created. To specify the
global setting for the Git user name, use
\code{\link[workflowr]{wflow_git_config}} instead. When \code{user.name =
NULL}, no user name is recorded for the project, and the global
setting will be used. This setting can be modified later
by running \code{git config --local} in the Terminal.}

\item{user.email}{character (default: \code{NULL}). The email
address used by Git to sign commits, e.g.,
"ada.lovelace@ox.ac.uk". This setting only applies to the workflowr
project being created. To specify the global setting for the Git
email address, use \code{\link[workflowr]{wflow_git_config}} instead. When
\code{user.name = NULL}, no email address is recorded for the
project, and the global setting will be used. This setting can be
modified later by running \code{git config --local} in the Terminal.}

\item{name}{character (default: \code{NULL}). The name of the
project, e.g. "My Workflowr Project". When \code{name = NULL}, the
project name is automatically determined based on
\code{directory}. For example, if \code{directory =
"~/projects/my-wflow-project"}, then \code{name} is set to
\code{"my-wflow-project"}. The project name is displayed on the
website's navigation bar and in the \code{README.md} file.}

\item{git}{logical (default: \code{TRUE}). Should the workflowr files be
committed with Git? If \code{git = TRUE} and no existing Git repository is
detected, \code{wflow_start} will initialize the repository and make an
initial commit. If a Git repository already exists in the chosen directory,
\code{wflow_start} will commit any newly created or modified files to the
existing repository (also need to set \code{existing = TRUE}). If \code{git
= FALSE}, \code{wflow_start} will not perform any Git commands.}

\item{existing}{logical (default: \code{FALSE}). Indicate whether
\code{directory} already exists. This argument is added to prevent
accidental creation of files in an existing directory; setting
\code{existing = FALSE} prevents files from being created if the
specified directory already exists.}

\item{overwrite}{logical (default: \code{FALSE}). Similar to
\code{existing}, this argument prevents files from accidentally
being overwritten when \code{overwrite = FALSE}. When
\code{overwrite = TRUE}, any existing file in \code{directory} that
has the same name as a workflowr file will be replaced by the
workflowr file. When \code{git = TRUE}, all the standard workflowr
files will be added and committed (regardless of whether they were
overwritten or still contain the original content).}

\item{change_wd}{logical (default: \code{TRUE}). Change the working
directory to the \code{directory}.}

\item{disable_remote}{logical (default: \code{FALSE}). Create a Git
\href{https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks}{pre-push
hook} that prevents pushing to a remote Git repository (i.e. using
\code{\link[workflowr]{wflow_git_push}}). This is useful for extremely confidential
projects that cannot be shared via an online Git hosting service (e.g.
GitHub or GitLab). The hook is saved in the file
\code{.git/hooks/pre-push}. If you change your mind and want to push the
repository, you can delete that file. Note that this option is only
available if \code{git = TRUE}. Note that this is currently only supported
for Linux and macOS.}

\item{dry_run}{logical (default: \code{FALSE}). When \code{dry_run
= TRUE}, the actions are previewed without executing them.}

\item{fields}{A named list of fields to add to \code{DESCRIPTION}, potentially
overriding default values. See \code{\link[usethis:use_description]{use_description()}} for how you can set
personalized defaults using package options.}

\item{rstudio}{If \code{TRUE}, calls \code{\link[usethis:use_rstudio]{use_rstudio()}} to make the new package or
project into an \href{https://support.rstudio.com/hc/en-us/articles/200526207-Using-Projects}{RStudio Project}.
If \code{FALSE} and a non-package project, a sentinel \code{.here} file is placed so
that the directory can be recognized as a project by the
\href{https://here.r-lib.org}{here} or
\href{https://rprojroot.r-lib.org}{rprojroot} packages.}

\item{roxygen}{Do you plan to use roxygen2 to document your package?}

\item{check_name}{Whether to check if the name is valid for CRAN and throw an
error if not.}

\item{open}{If \code{TRUE}, \link[usethis:proj_activate]{activates} the new project:
\itemize{
\item If RStudio desktop, the package is opened in a new session.
\item If on RStudio server, the current RStudio project is activated.
\item Otherwise, the working directory and active project is changed.
}}
}
\value{
Called for side effects.
}
\description{
Builds on the workflowr and targets packages. Also includes R package
infrastructure.
}
\examples{
\dontrun{
 create_rawproj(tempdir())
}
}
